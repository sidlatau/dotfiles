{
  "try": {
    "prefix": "try",
    "description": "Insert a try/catch block.",
    "body": [
      "try {",
      "  $1",
      "} catch (e, s) {",
      "  ${0:context.showError(e, s)}",
      "}"
    ]
  },
  "if": {
    "prefix": "if",
    "description": "Insert an if statement.",
    "body": [
      "if ($1) {",
      "  $0",
      "}"
    ]
  },
  "if else": {
    "prefix": "ife",
    "description": "Insert an if statement with an else block.",
    "body": [
      "if ($1) {",
      "  $0",
      "} else {",
      "}"
    ]
  },
  "switch case": {
    "prefix": "switch",
    "description": "Insert a switch statement.",
    "body": [
      "switch ($1) {",
      "  case $2:",
      "    $0",
      "  default:",
      "}"
    ]
  },
  "for": {
    "prefix": "for",
    "description": "Insert a for loop.",
    "body": [
      "for (var i = 0; i < ${1:count}; i++) {",
      "  $0",
      "}"
    ]
  },
  "for in": {
    "prefix": "fori",
    "description": "Insert a for-in loop.",
    "body": [
      "for (var ${1:item} in ${2:items}) {",
      "  $0",
      "}"
    ]
  },
  "while": {
    "prefix": "while",
    "description": "Insert a while loop.",
    "body": [
      "while ($1) {",
      "  $0",
      "}"
    ]
  },
  "do while": {
    "prefix": "do",
    "description": "Insert a do-while loop.",
    "body": [
      "do {",
      "  $0",
      "} while ($1);"
    ]
  },
  "fun": {
    "prefix": "fun",
    "description": "Insert a function definition.",
    "body": [
      "${3:void} ${1:name}(${2:args}) {",
      "  $0",
      "}"
    ]
  },
  "typedef": {
    "prefix": "typedef",
    "description": "Insert a typedef.",
    "body": "typedef ${1:Type} ${2:Name}(${3:params});"
  },
  "test": {
    "prefix": "test",
    "description": "Insert a test block.",
    "body": [
      "test('$1', () {",
      "  $0",
      "});"
    ]
  },
  "group": {
    "prefix": "group",
    "description": "Insert a test group block.",
    "body": [
      "group('$1', () {",
      "  $0",
      "});"
    ]
  },
  "Scaffold widget snippet": {
    "prefix": "scaff",
    "body": [
      "Scaffold(",
      "  appBar: AppBar(",
      "    title: Text('${1:Title}'),",
      "  ),",
      "  body: ${2:SizedBox()}${0},",
      ");"
    ],
    "description": "Scaffold widget snippet"
  },
  "Flutter Icon widget snippet": {
    "prefix": "ic",
    "body": [
      "Icon(Icons.${1:clear})${0}"
    ],
    "description": "Flutter Icon widget snippet"
  },
  "Stateless Widget": {
    "prefix": "stless",
    "body": [
      "class ${1:name} extends StatelessWidget {",
      "  const ${1:name}({super.key});",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${0:SizedBox()};",
      "  }",
      "}"
    ],
    "description": "Create a Stateless widget"
  },
  "Stateful Widget": {
    "prefix": "stfull",
    "body": [
      "class ${1:name} extends StatefulWidget {",
      "  ${1:name}({super.key});",
      "  @override",
      "  _${1:WidgetName}State createState() => _${1:WidgetName}State();",
      "}",
      "class _${1:index}State extends State<${1:index}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${0:SizedBox()};",
      " }",
      "}"
    ],
    "description": "Create a Stateful widget"
  },
  "Build Method": {
    "prefix": "build",
    "body": [
      "@override",
      "Widget build(BuildContext context) {",
      "  return ${0:};",
      "}"
    ],
    "description": "Describes the part of the user interface represented by this widget."
  },
  "Custom Painter ": {
    "prefix": "customPainter",
    "body": [
      "class ${0:name}Painter extends CustomPainter {",
      "",
      "  @override",
      "  void paint(Canvas canvas, Size size) {",
      "  }",
      "",
      "  @override",
      "  bool shouldRepaint(${0:name}Painter oldDelegate) => false;",
      "",
      "  @override",
      "  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
      "}"
    ],
    "description": "Used for creating custom paint"
  },
  "InitState ": {
    "prefix": "initS",
    "body": [
      "@override",
      "void initState() { ",
      "  super.initState();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates."
  },
  "Dispose": {
    "prefix": "dis",
    "body": [
      "@override",
      "void dispose() { ",
      "  ${0:}",
      "  super.dispose();",
      "}"
    ],
    "description": "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again."
  },
  "didChangeDependencies": {
    "prefix": "didChangeD",
    "body": [
      "@override",
      "void didChangeDependencies() {",
      "  super.didChangeDependencies();",
      "  ${0:}",
      "}"
    ],
    "description": "Called when a dependency of this State object changes"
  },
  "didUpdateWidget": {
    "prefix": "didUpdateW",
    "body": [
      "@override",
      "void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
      "  super.didUpdateWidget(${2:oldWidget});",
      "  ${0:}",
      "}"
    ],
    "description": "Called whenever the widget configuration changes."
  },
  "ListView.Builder": {
    "prefix": "listViewB",
    "body": [
      "ListView.builder(",
      "  itemCount: ${1:1},",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "),"
    ],
    "description": "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent."
  },
  "ListView.Separated": {
    "prefix": "listViewS",
    "body": [
      "ListView.separated(",
      "  itemCount: ${1:1},",
      "  separatorBuilder: (BuildContext context, int index) {",
      "  return ${2:};",
      " },",
      "  itemBuilder: (BuildContext context, int index) {",
      "  return ${3:};",
      " },",
      "),"
    ],
    "description": "Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'."
  },
  "Custom Scroll View": {
    "prefix": "customScrollV",
    "body": [
      "CustomScrollView(",
      "  slivers: <Widget>[",
      "  ${0:}",
      "  ],",
      "),"
    ],
    "description": "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null."
  },
  "Stream Builder": {
    "prefix": "streamBldr",
    "body": [
      "StreamBuilder(",
      "  stream: ${1:stream},",
      "  initialData: ${2:initialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`"
  },
  "Animated Builder": {
    "prefix": "animatedBldr",
    "body": [
      "AnimatedBuilder(",
      "  animation: ${1:animation},",
      "  child: ${2:child},",
      "  builder: (BuildContext context, Widget child) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` "
  },
  "Stateful Builder": {
    "prefix": "statefulBldr",
    "body": [
      "StatefulBuilder(",
      "  builder: (BuildContext context, setState) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree."
  },
  "Orientation Builder": {
    "prefix": "orientationBldr",
    "body": [
      "OrientationBuilder(",
      "  builder: (BuildContext context, Orientation orientation) {",
      "    return Container(",
      "      child: ${3:child},",
      "    );",
      "  },",
      "),"
    ],
    "description": "Creates a builder which allows for the orientation of the device to be specified and referenced"
  },
  "Layout Builder": {
    "prefix": "layoutBldr",
    "body": [
      "LayoutBuilder(",
      "  builder: (BuildContext context, BoxConstraints constraints) {",
      "    return ${0:};",
      "  },",
      "),"
    ],
    "description": "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints."
  },
  "Single Child ScrollView": {
    "prefix": "singleChildSV",
    "body": [
      "SingleChildScrollView(",
      "  controller: ${1:controller,}",
      "  child: Column(",
      "    ${0:}",
      "  ),",
      "),"
    ],
    "description": "Creates a scroll view with a single child"
  },
  "Future Builder": {
    "prefix": "futureBldr",
    "body": [
      "FutureBuilder(",
      "  future: ${1:Future},",
      "  initialData: ${2:InitialData},",
      "  builder: (BuildContext context, AsyncSnapshot snapshot) {",
      "    return ${3:};",
      "  },",
      "),"
    ],
    "description": "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future."
  },
  "Inherited Widget": {
    "prefix": "inheritedW",
    "body": [
      "class ${1:Name} extends InheritedWidget {",
      "  ${1:Name}({Key? key, this.child}) : super(key: key, child: child);",
      "",
      "  final Widget child;",
      "",
      "  static ${1:Name} of(BuildContext context) {",
      "    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();",
      "  }",
      "",
      "  @override",
      "  bool updateShouldNotify(${1:Name} oldWidget) {",
      "    return ${2:true};",
      "  }",
      "}"
    ],
    "description": "Class used to propagate information down the widget tree"
  },
  "Tween Animation Builder": {
    "prefix": "tweenAnimationBuilder",
    "body": [
      "TweenAnimationBuilder(",
      "    duration: ${1:const Duration(),}",
      "    tween: ${2:Tween(),}",
      "    builder: (BuildContext context, ${3:dynamic} value, Widget child) {",
      "       return ${4:Container();}",
      "     },",
      " ),  "
    ],
    "description": "Widget builder that animates a property of a Widget to a target value whenever the target value changes."
  },
  "Value Listenable Builder": {
    "prefix": "valueListenableBuilder",
    "body": [
      "ValueListenableBuilder(",
      "    valueListenable: ${1: null},",
      "    builder: (BuildContext context, ${2:dynamic} value, Widget child) {",
      "       return ${3: Container();}",
      "    },",
      " ),"
    ],
    "description": "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes."
  },
  "Test Widgets": {
    "prefix": "testWidget",
    "body": [
      "testWidgets(",
      "   '${1:test description}',",
      "   (tester) async {",
      "     await initPump(tester);",
      "   ${2}",
      "   },",
      "   skip: skipTests,",
      ");"
    ],
    "description": "Create a testWidgets function"
  },
  "Flutter Screen": {
    "prefix": "scr",
    "body": [
      "import 'package:app/l10n/l10n.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "class ${TM_FILENAME_BASE/(.*)$/${1:/pascalcase}/} extends StatelessWidget {",
      "  const ${TM_FILENAME_BASE/(.*)$/${1:/pascalcase}/}({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) => Scaffold(",
      "      appBar: AppBar(",
      "        title: Text(context.l10n.${TM_FILENAME_BASE/(.*)$/${1:/camelcase}/}),",
      "      ),",
      "    );",
      "}"
    ],
    "description": "Flutter screen"
  },
  "Flutter Row widget snippet": {
    "prefix": "row",
    "body": [
      "Row(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Row widget snippet"
  },
  "Flutter Column widget snippet": {
    "prefix": "col",
    "body": [
      "Column(",
      "  children: <Widget>[${0}],",
      ")"
    ],
    "description": "Flutter Column widget snippet"
  },
  "SizedBox.shrink": {
    "prefix": "sbs",
    "body": [
      "const SizedBox.shrink()"
    ],
    "description": "SizedBox shrink"
  },
  "Equatable": {
    "prefix": "eq",
    "body": [
      "class ${1:ClassName} extends Equatable {",
      "  const ${1:ClassName}({",
      "    required this.${3:field},",
      "  });",
      "  final ${2:type} ${3:field};",
      "",
      "  @override",
      "  List<Object> get props => [",
      "   ${3:field},",
      "];",
      "}"
    ],
    "description": "Equatable class"
  }
}
